{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://127.0.0.1:8005',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// API methods\nexport const authAPI = {\n  register: userData => api.post('/auth/register', userData),\n  login: credentials => api.post('/auth/login', credentials)\n};\nexport const onboardingAPI = {\n  getGenres: () => api.get('/onboarding/genres'),\n  selectGenres: (userId, genres) => api.post(`/onboarding/select-genres/${userId}`, genres),\n  getMoviesForRating: userId => api.get(`/onboarding/movies-for-rating/${userId}`)\n};\nexport const ratingsAPI = {\n  voteMovie: (userId, voteData) => api.post(`/ratings/vote/${userId}`, voteData),\n  voteMultipleMovies: (userId, votesData) => api.post(`/ratings/vote-multiple/${userId}`, votesData),\n  getUserRatings: userId => api.get(`/ratings/user-ratings/${userId}`)\n};\nexport const recommendationsAPI = {\n  // Nuovi endpoint ML\n  getRecommendations: (userId, topN = 10) => api.get(`/recommendations/user/${userId}?top_n=${topN}`),\n  getUserHistory: userId => api.get(`/recommendations/user/${userId}/history`),\n  getModelStatus: () => api.get('/recommendations/status'),\n  trainModel: () => api.get('/recommendations/train-sync'),\n  trainModelAsync: () => api.post('/recommendations/train'),\n  getEvaluation: () => api.get('/recommendations/evaluation'),\n  getClustering: () => api.get('/recommendations/clustering'),\n  getPopularRecommendations: (topN = 10) => api.get(`/recommendations/popular?top_n=${topN}`),\n  // Backward compatibility (deprecated)\n  getUserStats: userId => api.get(`/recommendations/user/${userId}/history`)\n};\n\n// Utility functions\nexport const setAuthToken = token => {\n  if (token) {\n    localStorage.setItem('token', token);\n  } else {\n    localStorage.removeItem('token');\n  }\n};\nexport const getAuthToken = () => {\n  return localStorage.getItem('token');\n};\nexport const removeAuthToken = () => {\n  localStorage.removeItem('token');\n};\n\n// TMDB image helper\nexport const getTMDBImageUrl = (posterPath, size = 'w500') => {\n  if (!posterPath) {\n    // Creiamo un SVG inline come Data URI per il placeholder\n    const placeholderSVG = `data:image/svg+xml,${encodeURIComponent(`\n      <svg width=\"500\" height=\"750\" xmlns=\"http://www.w3.org/2000/svg\">\n        <rect width=\"100%\" height=\"100%\" fill=\"#2a5298\"/>\n        <text x=\"50%\" y=\"45%\" text-anchor=\"middle\" fill=\"white\" font-size=\"24\" font-family=\"Arial\">\n          Film\n        </text>\n        <text x=\"50%\" y=\"55%\" text-anchor=\"middle\" fill=\"white\" font-size=\"24\" font-family=\"Arial\">\n          Poster\n        </text>\n      </svg>\n    `)}`;\n    return placeholderSVG;\n  }\n  return `https://image.tmdb.org/t/p/${size}${posterPath}`;\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","authAPI","register","userData","post","login","credentials","onboardingAPI","getGenres","get","selectGenres","userId","genres","getMoviesForRating","ratingsAPI","voteMovie","voteData","voteMultipleMovies","votesData","getUserRatings","recommendationsAPI","getRecommendations","topN","getUserHistory","getModelStatus","trainModel","trainModelAsync","getEvaluation","getClustering","getPopularRecommendations","getUserStats","setAuthToken","setItem","removeItem","getAuthToken","removeAuthToken","getTMDBImageUrl","posterPath","size","placeholderSVG","encodeURIComponent"],"sources":["C:/Users/aless/Desktop/Da_zero/fastApiProject/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with base configuration\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://127.0.0.1:8005',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor to include auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API methods\r\nexport const authAPI = {\r\n  register: (userData) => api.post('/auth/register', userData),\r\n  login: (credentials) => api.post('/auth/login', credentials),\r\n};\r\n\r\nexport const onboardingAPI = {\r\n  getGenres: () => api.get('/onboarding/genres'),\r\n  selectGenres: (userId, genres) => api.post(`/onboarding/select-genres/${userId}`, genres),\r\n  getMoviesForRating: (userId) => api.get(`/onboarding/movies-for-rating/${userId}`),\r\n};\r\n\r\nexport const ratingsAPI = {\r\n  voteMovie: (userId, voteData) => api.post(`/ratings/vote/${userId}`, voteData),\r\n  voteMultipleMovies: (userId, votesData) => api.post(`/ratings/vote-multiple/${userId}`, votesData),\r\n  getUserRatings: (userId) => api.get(`/ratings/user-ratings/${userId}`),\r\n};\r\n\r\nexport const recommendationsAPI = {\r\n  // Nuovi endpoint ML\r\n  getRecommendations: (userId, topN = 10) => api.get(`/recommendations/user/${userId}?top_n=${topN}`),\r\n  getUserHistory: (userId) => api.get(`/recommendations/user/${userId}/history`),\r\n  getModelStatus: () => api.get('/recommendations/status'),\r\n  trainModel: () => api.get('/recommendations/train-sync'),\r\n  trainModelAsync: () => api.post('/recommendations/train'),\r\n  getEvaluation: () => api.get('/recommendations/evaluation'),\r\n  getClustering: () => api.get('/recommendations/clustering'),\r\n  getPopularRecommendations: (topN = 10) => api.get(`/recommendations/popular?top_n=${topN}`),\r\n  \r\n  // Backward compatibility (deprecated)\r\n  getUserStats: (userId) => api.get(`/recommendations/user/${userId}/history`),\r\n};\r\n\r\n// Utility functions\r\nexport const setAuthToken = (token) => {\r\n  if (token) {\r\n    localStorage.setItem('token', token);\r\n  } else {\r\n    localStorage.removeItem('token');\r\n  }\r\n};\r\n\r\nexport const getAuthToken = () => {\r\n  return localStorage.getItem('token');\r\n};\r\n\r\nexport const removeAuthToken = () => {\r\n  localStorage.removeItem('token');\r\n};\r\n\r\n// TMDB image helper\r\nexport const getTMDBImageUrl = (posterPath, size = 'w500') => {\r\n  if (!posterPath) {\r\n    // Creiamo un SVG inline come Data URI per il placeholder\r\n    const placeholderSVG = `data:image/svg+xml,${encodeURIComponent(`\r\n      <svg width=\"500\" height=\"750\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <rect width=\"100%\" height=\"100%\" fill=\"#2a5298\"/>\r\n        <text x=\"50%\" y=\"45%\" text-anchor=\"middle\" fill=\"white\" font-size=\"24\" font-family=\"Arial\">\r\n          Film\r\n        </text>\r\n        <text x=\"50%\" y=\"55%\" text-anchor=\"middle\" fill=\"white\" font-size=\"24\" font-family=\"Arial\">\r\n          Poster\r\n        </text>\r\n      </svg>\r\n    `)}`;\r\n    return placeholderSVG;\r\n  }\r\n  return `https://image.tmdb.org/t/p/${size}${posterPath}`;\r\n};\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EACjEC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMG,OAAO,GAAG;EACrBC,QAAQ,EAAGC,QAAQ,IAAKpB,GAAG,CAACqB,IAAI,CAAC,gBAAgB,EAAED,QAAQ,CAAC;EAC5DE,KAAK,EAAGC,WAAW,IAAKvB,GAAG,CAACqB,IAAI,CAAC,aAAa,EAAEE,WAAW;AAC7D,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG;EAC3BC,SAAS,EAAEA,CAAA,KAAMzB,GAAG,CAAC0B,GAAG,CAAC,oBAAoB,CAAC;EAC9CC,YAAY,EAAEA,CAACC,MAAM,EAAEC,MAAM,KAAK7B,GAAG,CAACqB,IAAI,CAAC,6BAA6BO,MAAM,EAAE,EAAEC,MAAM,CAAC;EACzFC,kBAAkB,EAAGF,MAAM,IAAK5B,GAAG,CAAC0B,GAAG,CAAC,iCAAiCE,MAAM,EAAE;AACnF,CAAC;AAED,OAAO,MAAMG,UAAU,GAAG;EACxBC,SAAS,EAAEA,CAACJ,MAAM,EAAEK,QAAQ,KAAKjC,GAAG,CAACqB,IAAI,CAAC,iBAAiBO,MAAM,EAAE,EAAEK,QAAQ,CAAC;EAC9EC,kBAAkB,EAAEA,CAACN,MAAM,EAAEO,SAAS,KAAKnC,GAAG,CAACqB,IAAI,CAAC,0BAA0BO,MAAM,EAAE,EAAEO,SAAS,CAAC;EAClGC,cAAc,EAAGR,MAAM,IAAK5B,GAAG,CAAC0B,GAAG,CAAC,yBAAyBE,MAAM,EAAE;AACvE,CAAC;AAED,OAAO,MAAMS,kBAAkB,GAAG;EAChC;EACAC,kBAAkB,EAAEA,CAACV,MAAM,EAAEW,IAAI,GAAG,EAAE,KAAKvC,GAAG,CAAC0B,GAAG,CAAC,yBAAyBE,MAAM,UAAUW,IAAI,EAAE,CAAC;EACnGC,cAAc,EAAGZ,MAAM,IAAK5B,GAAG,CAAC0B,GAAG,CAAC,yBAAyBE,MAAM,UAAU,CAAC;EAC9Ea,cAAc,EAAEA,CAAA,KAAMzC,GAAG,CAAC0B,GAAG,CAAC,yBAAyB,CAAC;EACxDgB,UAAU,EAAEA,CAAA,KAAM1C,GAAG,CAAC0B,GAAG,CAAC,6BAA6B,CAAC;EACxDiB,eAAe,EAAEA,CAAA,KAAM3C,GAAG,CAACqB,IAAI,CAAC,wBAAwB,CAAC;EACzDuB,aAAa,EAAEA,CAAA,KAAM5C,GAAG,CAAC0B,GAAG,CAAC,6BAA6B,CAAC;EAC3DmB,aAAa,EAAEA,CAAA,KAAM7C,GAAG,CAAC0B,GAAG,CAAC,6BAA6B,CAAC;EAC3DoB,yBAAyB,EAAEA,CAACP,IAAI,GAAG,EAAE,KAAKvC,GAAG,CAAC0B,GAAG,CAAC,kCAAkCa,IAAI,EAAE,CAAC;EAE3F;EACAQ,YAAY,EAAGnB,MAAM,IAAK5B,GAAG,CAAC0B,GAAG,CAAC,yBAAyBE,MAAM,UAAU;AAC7E,CAAC;;AAED;AACA,OAAO,MAAMoB,YAAY,GAAIrC,KAAK,IAAK;EACrC,IAAIA,KAAK,EAAE;IACTC,YAAY,CAACqC,OAAO,CAAC,OAAO,EAAEtC,KAAK,CAAC;EACtC,CAAC,MAAM;IACLC,YAAY,CAACsC,UAAU,CAAC,OAAO,CAAC;EAClC;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAChC,OAAOvC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AACtC,CAAC;AAED,OAAO,MAAMuC,eAAe,GAAGA,CAAA,KAAM;EACnCxC,YAAY,CAACsC,UAAU,CAAC,OAAO,CAAC;AAClC,CAAC;;AAED;AACA,OAAO,MAAMG,eAAe,GAAGA,CAACC,UAAU,EAAEC,IAAI,GAAG,MAAM,KAAK;EAC5D,IAAI,CAACD,UAAU,EAAE;IACf;IACA,MAAME,cAAc,GAAG,sBAAsBC,kBAAkB,CAAC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC,EAAE;IACJ,OAAOD,cAAc;EACvB;EACA,OAAO,8BAA8BD,IAAI,GAAGD,UAAU,EAAE;AAC1D,CAAC;AAED,eAAetD,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}